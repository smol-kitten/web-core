# This workflow builds multiple Docker image variants for different OS versions and features
# Multi-stage build: prep_base → prep_nginx/prep_apache2 → specific variants with imagick/phpdbg permutations

name: Build Docker Images

on:
  push:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sundays at 02:00 UTC

jobs:
  build-prep-base:
    runs-on: self-hosted
    strategy:
      matrix:
        version:
          - 24.04
          - 25.04
          - "25.10"
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Ensure buildx cache directories
        run: |
          # Create all cache directories used by this workflow and make them writable
          sudo mkdir -p /home/runner/.cache/buildx/{prep-base,prep-nginx,prep-apache,prep-nginx-imagick,prep-apache-imagick,variants-nginx,variants-apache2}
          # Make writable by all to avoid permission issues when buildkit writes cache blobs
          sudo chmod -R 0777 /home/runner/.cache/buildx || true
      
      - name: Build and push prep base image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_prep_base
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/prep_base:${{ matrix.version }}
          build-args: |
            BASE_IMAGE=ubuntu:${{ matrix.version }}
          cache-from: type=local,src=/home/runner/.cache/buildx/prep-base
          cache-to: type=local,dest=/home/runner/.cache/buildx/prep-base,mode=max

  build-prep-nginx:
    needs: build-prep-base
    runs-on: self-hosted
    strategy:
      matrix:
        version:
          - 24.04
          - 25.04
          - "25.10"
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push prep_nginx image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_prep_nginx
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/prep_nginx:${{ matrix.version }}
          build-args: |
            BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/prep_base:${{ matrix.version }}
          cache-from: type=local,src=/home/runner/.cache/buildx/prep-nginx
          cache-to: type=local,dest=/home/runner/.cache/buildx/prep-nginx,mode=max

  build-prep-apache:
    needs: build-prep-base
    runs-on: self-hosted
    strategy:
      matrix:
        version:
          - 24.04
          - 25.04
          - "25.10"
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push prep_apache2 image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_prep_apache2
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/prep_apache2:${{ matrix.version }}
          build-args: |
            BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/prep_base:${{ matrix.version }}
          cache-from: type=local,src=/home/runner/.cache/buildx/prep-apache
          cache-to: type=local,dest=/home/runner/.cache/buildx/prep-apache,mode=max

  build-prep-nginx-imagick:
    needs: build-prep-nginx
    runs-on: self-hosted
    strategy:
      matrix:
        version:
          - 24.04
          - 25.04
          - "25.10"
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push prep_nginx_imagick image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_prep_nginx_imagick
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/prep_nginx_imagick:${{ matrix.version }}
          build-args: |
            BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/prep_nginx:${{ matrix.version }}
          cache-from: type=local,src=/home/runner/.cache/buildx/prep-nginx-imagick
          cache-to: type=local,dest=/home/runner/.cache/buildx/prep-nginx-imagick,mode=max

  build-prep-apache-imagick:
    needs: [build-prep-apache, build-prep-nginx-imagick]
    runs-on: self-hosted
    strategy:
      matrix:
        version:
          - 24.04
          - 25.04
          - "25.10"
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push prep_apache2_imagick image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_prep_apache2_imagick
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/prep_apache2_imagick:${{ matrix.version }}
          build-args: |
            BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/prep_apache2:${{ matrix.version }}
          cache-from: type=local,src=/home/runner/.cache/buildx/prep-apache-imagick
          cache-to: type=local,dest=/home/runner/.cache/buildx/prep-apache-imagick,mode=max

  build-variants:
    needs: [build-prep-nginx-imagick, build-prep-apache-imagick]
    runs-on: self-hosted
    strategy:
      matrix:
        server:
          - nginx
          - apache2
        version:
          - 24.04
          - 25.04
          - "25.10"
        imagick:
          - true
          - false
        sqlite:
          - true
          - false
        mysql:
          - true
          - false
        ssh2:
          - true
          - false
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set image metadata
        id: meta
        run: |
          # Build variant suffix from all extensions
          VARIANT=""
          PARTS=""
          
          [ "${{ matrix.imagick }}" = "true" ] && PARTS="${PARTS}-imagick"
          [ "${{ matrix.sqlite }}" = "true" ] && PARTS="${PARTS}-sqlite"
          [ "${{ matrix.mysql }}" = "true" ] && PARTS="${PARTS}-mysql"
          [ "${{ matrix.ssh2 }}" = "true" ] && PARTS="${PARTS}-ssh2"
          
          VARIANT="${PARTS}"
          
          # Determine base image based on server type and imagick requirement
          if [ "${{ matrix.server }}" = "apache2" ]; then
            if [ "${{ matrix.imagick }}" = "true" ]; then
              BASE_PREP="prep_apache2_imagick"
            else
              BASE_PREP="prep_apache2"
            fi
          else
            if [ "${{ matrix.imagick }}" = "true" ]; then
              BASE_PREP="prep_nginx_imagick"
            else
              BASE_PREP="prep_nginx"
            fi
          fi
          
          IMAGE_TAG="ghcr.io/${{ github.repository_owner }}/${{ matrix.server }}:${{ matrix.version }}${VARIANT}"
          
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "variant=$VARIANT" >> $GITHUB_OUTPUT
          echo "base_prep=$BASE_PREP" >> $GITHUB_OUTPUT
        shell: bash
      
      - name: Build and push variant image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile_specific
          push: true
          tags: ${{ steps.meta.outputs.image_tag }}
          build-args: |
            BASE_IMAGE=ghcr.io/${{ github.repository_owner }}/${{ steps.meta.outputs.base_prep }}:${{ matrix.version }}
            INSTALL_IMAGICK=${{ matrix.imagick }}
            INSTALL_SQLITE=${{ matrix.sqlite }}
            INSTALL_MYSQL=${{ matrix.mysql }}
            INSTALL_SSH2=${{ matrix.ssh2 }}            
          cache-from: type=local,src=/home/runner/.cache/buildx/variants-${{ matrix.server }}

 #cleanup-untagged:
 #  needs: build-variants
 #  runs-on: self-hosted
 #  steps:
 #    - name: Delete untagged images from registry
 #      uses: actions/github-script@v7
 #      with:
 #        github-token: ${{ secrets.GITHUB_TOKEN }}
 #        script: |
 #          const packages = ['nginx', 'apache2', 'prep_base', 'prep_nginx', 'prep_apache2', 'prep_nginx_imagick', 'prep_apache2_imagick'];
 #          
 #          for (const packageName of packages) {
 #            try {
 #              // Get all versions of the package
 #              const versions = await github.rest.packages.getAllPackageVersionsForPackageOwnedByUser({
 #                package_type: 'container',
 #                package_name: packageName,
 #                username: context.repo.owner
 #              });
 #              
 #              // Filter versions that are ONLY tagged with SHA (no semantic tags)
 #              const shaOnlyVersions = versions.data.filter(version => {
 #                const tags = version.metadata.container.tags;
 #                if (tags.length === 0) return true; // No tags at all
 #                // Check if all tags are SHA256 hashes (start with sha256:)
 #                return tags.every(tag => tag.startsWith('sha256:'));
 #              });
 #              
 #              // Delete SHA-only versions
 #              for (const version of shaOnlyVersions) {
 #                console.log(`Deleting SHA-only version ${version.id} of package ${packageName} (tags: ${version.metadata.container.tags.join(', ')})`);
 #                await github.rest.packages.deletePackageVersionForUser({
 #                  package_type: 'container',
 #                  package_name: packageName,
 #                  username: context.repo.owner,
 #                  package_version_id: version.id
 #                });
 #              }
 #              
 #              console.log(`Cleaned up ${shaOnlyVersions.length} SHA-only versions from ${packageName}`);
 #            } catch (error) {
 #              console.log(`Error cleaning up ${packageName}: ${error.message}`);
 #            }
 #          }
